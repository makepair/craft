// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGetRequestImpl();
void InitDefaultsGetRequest();
void InitDefaultsGetResponseImpl();
void InitDefaultsGetResponse();
void InitDefaultsPutRequestImpl();
void InitDefaultsPutRequest();
void InitDefaultsPutResponseImpl();
void InitDefaultsPutResponse();
void InitDefaultsLockRequestImpl();
void InitDefaultsLockRequest();
void InitDefaultsUnlockRequestImpl();
void InitDefaultsUnlockRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsGetRequest();
  InitDefaultsGetResponse();
  InitDefaultsPutRequest();
  InitDefaultsPutResponse();
  InitDefaultsLockRequest();
  InitDefaultsUnlockRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_service_2eproto
namespace kvdb {
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class LockRequest;
class LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class UnlockRequest;
class UnlockRequestDefaultTypeInternal;
extern UnlockRequestDefaultTypeInternal _UnlockRequest_default_instance_;
}  // namespace kvdb
namespace kvdb {

// ===================================================================

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kvdb.GetRequest)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_key();
  void clear_has_key();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int64 sequence_num_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsGetRequestImpl();
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_id = 4;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // optional string error_txt = 5;
  bool has_error_txt() const;
  void clear_error_txt();
  static const int kErrorTxtFieldNumber = 5;
  const ::std::string& error_txt() const;
  void set_error_txt(const ::std::string& value);
  #if LANG_CXX11
  void set_error_txt(::std::string&& value);
  #endif
  void set_error_txt(const char* value);
  void set_error_txt(const char* value, size_t size);
  ::std::string* mutable_error_txt();
  ::std::string* release_error_txt();
  void set_allocated_error_txt(::std::string* error_txt);

  // optional bytes value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kvdb.GetResponse)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_success();
  void clear_has_success();
  void set_has_result();
  void clear_has_result();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_error_txt();
  void clear_has_error_txt();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr error_txt_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 sequence_num_;
  bool success_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsGetResponseImpl();
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required bytes value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kvdb.PutRequest)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int64 sequence_num_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsPutRequestImpl();
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_id = 4;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // optional string error_txt = 5;
  bool has_error_txt() const;
  void clear_error_txt();
  static const int kErrorTxtFieldNumber = 5;
  const ::std::string& error_txt() const;
  void set_error_txt(const ::std::string& value);
  #if LANG_CXX11
  void set_error_txt(::std::string&& value);
  #endif
  void set_error_txt(const char* value);
  void set_error_txt(const char* value, size_t size);
  ::std::string* mutable_error_txt();
  ::std::string* release_error_txt();
  void set_allocated_error_txt(::std::string* error_txt);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kvdb.PutResponse)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_success();
  void clear_has_success();
  void set_has_result();
  void clear_has_result();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_error_txt();
  void clear_has_error_txt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr error_txt_;
  ::google::protobuf::int64 sequence_num_;
  bool success_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsPutResponseImpl();
};
// -------------------------------------------------------------------

class LockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.LockRequest) */ {
 public:
  LockRequest();
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LockRequest* other);
  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LockRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LockRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string owner = 3;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // required int32 timeout_ms = 4;
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 4;
  ::google::protobuf::int32 timeout_ms() const;
  void set_timeout_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kvdb.LockRequest)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_key();
  void clear_has_key();
  void set_has_owner();
  void clear_has_owner();
  void set_has_timeout_ms();
  void clear_has_timeout_ms();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::int64 sequence_num_;
  ::google::protobuf::int32 timeout_ms_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsLockRequestImpl();
};
// -------------------------------------------------------------------

class UnlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.UnlockRequest) */ {
 public:
  UnlockRequest();
  virtual ~UnlockRequest();

  UnlockRequest(const UnlockRequest& from);

  inline UnlockRequest& operator=(const UnlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnlockRequest(UnlockRequest&& from) noexcept
    : UnlockRequest() {
    *this = ::std::move(from);
  }

  inline UnlockRequest& operator=(UnlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockRequest* internal_default_instance() {
    return reinterpret_cast<const UnlockRequest*>(
               &_UnlockRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UnlockRequest* other);
  friend void swap(UnlockRequest& a, UnlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnlockRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnlockRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnlockRequest& from);
  void MergeFrom(const UnlockRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string owner = 3;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:kvdb.UnlockRequest)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_key();
  void clear_has_key();
  void set_has_owner();
  void clear_has_owner();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::int64 sequence_num_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsUnlockRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kvdb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_id = 4;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // optional string error_txt = 5;
  bool has_error_txt() const;
  void clear_error_txt();
  static const int kErrorTxtFieldNumber = 5;
  const ::std::string& error_txt() const;
  void set_error_txt(const ::std::string& value);
  #if LANG_CXX11
  void set_error_txt(::std::string&& value);
  #endif
  void set_error_txt(const char* value);
  void set_error_txt(const char* value, size_t size);
  ::std::string* mutable_error_txt();
  ::std::string* release_error_txt();
  void set_allocated_error_txt(::std::string* error_txt);

  // required int64 sequence_num = 1;
  bool has_sequence_num() const;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 1;
  ::google::protobuf::int64 sequence_num() const;
  void set_sequence_num(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kvdb.Response)
 private:
  void set_has_sequence_num();
  void clear_has_sequence_num();
  void set_has_success();
  void clear_has_success();
  void set_has_result();
  void clear_has_result();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_error_txt();
  void clear_has_error_txt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr error_txt_;
  ::google::protobuf::int64 sequence_num_;
  bool success_;
  ::google::protobuf::int32 result_;
  friend struct ::protobuf_service_2eproto::TableStruct;
  friend void ::protobuf_service_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================

class ProtoKVDBService_Stub;

class ProtoKVDBService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ProtoKVDBService() {};
 public:
  virtual ~ProtoKVDBService();

  typedef ProtoKVDBService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::kvdb::GetRequest* request,
                       ::kvdb::GetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Put(::google::protobuf::RpcController* controller,
                       const ::kvdb::PutRequest* request,
                       ::kvdb::PutResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Lock(::google::protobuf::RpcController* controller,
                       const ::kvdb::LockRequest* request,
                       ::kvdb::Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Unlock(::google::protobuf::RpcController* controller,
                       const ::kvdb::UnlockRequest* request,
                       ::kvdb::Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProtoKVDBService);
};

class ProtoKVDBService_Stub : public ProtoKVDBService {
 public:
  ProtoKVDBService_Stub(::google::protobuf::RpcChannel* channel);
  ProtoKVDBService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ProtoKVDBService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ProtoKVDBService ------------------------------------------

  void Get(::google::protobuf::RpcController* controller,
                       const ::kvdb::GetRequest* request,
                       ::kvdb::GetResponse* response,
                       ::google::protobuf::Closure* done);
  void Put(::google::protobuf::RpcController* controller,
                       const ::kvdb::PutRequest* request,
                       ::kvdb::PutResponse* response,
                       ::google::protobuf::Closure* done);
  void Lock(::google::protobuf::RpcController* controller,
                       const ::kvdb::LockRequest* request,
                       ::kvdb::Response* response,
                       ::google::protobuf::Closure* done);
  void Unlock(::google::protobuf::RpcController* controller,
                       const ::kvdb::UnlockRequest* request,
                       ::kvdb::Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProtoKVDBService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// required int64 sequence_num = 1;
inline bool GetRequest::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRequest::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRequest::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRequest::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 GetRequest::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.GetRequest.sequence_num)
  return sequence_num_;
}
inline void GetRequest::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.GetRequest.sequence_num)
}

// required bytes key = 2;
inline bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvdb.GetRequest.key)
  return key_.GetNoArena();
}
inline void GetRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.GetRequest.key)
}
#if LANG_CXX11
inline void GetRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.GetRequest.key)
}
#endif
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvdb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvdb.GetRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvdb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// required int64 sequence_num = 1;
inline bool GetResponse::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetResponse::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetResponse::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetResponse::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 GetResponse::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.sequence_num)
  return sequence_num_;
}
inline void GetResponse::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.sequence_num)
}

// required bool success = 2;
inline bool GetResponse::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetResponse::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool GetResponse::success() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.success)
  return success_;
}
inline void GetResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.success)
}

// optional int32 result = 3;
inline bool GetResponse::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetResponse::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GetResponse::result() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.result)
  return result_;
}
inline void GetResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.result)
}

// optional string server_id = 4;
inline bool GetResponse::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetResponse::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetResponse::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetResponse::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& GetResponse::server_id() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.server_id)
  return server_id_.GetNoArena();
}
inline void GetResponse::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.server_id)
}
#if LANG_CXX11
inline void GetResponse::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.GetResponse.server_id)
}
#endif
inline void GetResponse::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.GetResponse.server_id)
}
inline void GetResponse::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.GetResponse.server_id)
}
inline ::std::string* GetResponse::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:kvdb.GetResponse.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_server_id() {
  // @@protoc_insertion_point(field_release:kvdb.GetResponse.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:kvdb.GetResponse.server_id)
}

// optional string error_txt = 5;
inline bool GetResponse::has_error_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetResponse::set_has_error_txt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetResponse::clear_has_error_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetResponse::clear_error_txt() {
  error_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_txt();
}
inline const ::std::string& GetResponse::error_txt() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.error_txt)
  return error_txt_.GetNoArena();
}
inline void GetResponse::set_error_txt(const ::std::string& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.error_txt)
}
#if LANG_CXX11
inline void GetResponse::set_error_txt(::std::string&& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.GetResponse.error_txt)
}
#endif
inline void GetResponse::set_error_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.GetResponse.error_txt)
}
inline void GetResponse::set_error_txt(const char* value, size_t size) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.GetResponse.error_txt)
}
inline ::std::string* GetResponse::mutable_error_txt() {
  set_has_error_txt();
  // @@protoc_insertion_point(field_mutable:kvdb.GetResponse.error_txt)
  return error_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_error_txt() {
  // @@protoc_insertion_point(field_release:kvdb.GetResponse.error_txt)
  clear_has_error_txt();
  return error_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_error_txt(::std::string* error_txt) {
  if (error_txt != NULL) {
    set_has_error_txt();
  } else {
    clear_has_error_txt();
  }
  error_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_txt);
  // @@protoc_insertion_point(field_set_allocated:kvdb.GetResponse.error_txt)
}

// optional bytes value = 6;
inline bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvdb.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.GetResponse.value)
}
#if LANG_CXX11
inline void GetResponse::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.GetResponse.value)
}
#endif
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvdb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvdb.GetResponse.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvdb.GetResponse.value)
}

// -------------------------------------------------------------------

// PutRequest

// required int64 sequence_num = 1;
inline bool PutRequest::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutRequest::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutRequest::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutRequest::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 PutRequest::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.PutRequest.sequence_num)
  return sequence_num_;
}
inline void PutRequest::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.PutRequest.sequence_num)
}

// required bytes key = 2;
inline bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvdb.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.PutRequest.key)
}
#if LANG_CXX11
inline void PutRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.PutRequest.key)
}
#endif
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvdb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvdb.PutRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvdb.PutRequest.key)
}

// required bytes value = 3;
inline bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvdb.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.PutRequest.value)
}
#if LANG_CXX11
inline void PutRequest::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.PutRequest.value)
}
#endif
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:kvdb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvdb.PutRequest.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvdb.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// required int64 sequence_num = 1;
inline bool PutResponse::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PutResponse::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PutResponse::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PutResponse::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 PutResponse::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.PutResponse.sequence_num)
  return sequence_num_;
}
inline void PutResponse::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.PutResponse.sequence_num)
}

// required bool success = 2;
inline bool PutResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PutResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PutResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PutResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PutResponse::success() const {
  // @@protoc_insertion_point(field_get:kvdb.PutResponse.success)
  return success_;
}
inline void PutResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:kvdb.PutResponse.success)
}

// optional int32 result = 3;
inline bool PutResponse::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PutResponse::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PutResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PutResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PutResponse::result() const {
  // @@protoc_insertion_point(field_get:kvdb.PutResponse.result)
  return result_;
}
inline void PutResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kvdb.PutResponse.result)
}

// optional string server_id = 4;
inline bool PutResponse::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutResponse::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutResponse::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutResponse::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& PutResponse::server_id() const {
  // @@protoc_insertion_point(field_get:kvdb.PutResponse.server_id)
  return server_id_.GetNoArena();
}
inline void PutResponse::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.PutResponse.server_id)
}
#if LANG_CXX11
inline void PutResponse::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.PutResponse.server_id)
}
#endif
inline void PutResponse::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.PutResponse.server_id)
}
inline void PutResponse::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.PutResponse.server_id)
}
inline ::std::string* PutResponse::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:kvdb.PutResponse.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_server_id() {
  // @@protoc_insertion_point(field_release:kvdb.PutResponse.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:kvdb.PutResponse.server_id)
}

// optional string error_txt = 5;
inline bool PutResponse::has_error_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutResponse::set_has_error_txt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutResponse::clear_has_error_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutResponse::clear_error_txt() {
  error_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_txt();
}
inline const ::std::string& PutResponse::error_txt() const {
  // @@protoc_insertion_point(field_get:kvdb.PutResponse.error_txt)
  return error_txt_.GetNoArena();
}
inline void PutResponse::set_error_txt(const ::std::string& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.PutResponse.error_txt)
}
#if LANG_CXX11
inline void PutResponse::set_error_txt(::std::string&& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.PutResponse.error_txt)
}
#endif
inline void PutResponse::set_error_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.PutResponse.error_txt)
}
inline void PutResponse::set_error_txt(const char* value, size_t size) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.PutResponse.error_txt)
}
inline ::std::string* PutResponse::mutable_error_txt() {
  set_has_error_txt();
  // @@protoc_insertion_point(field_mutable:kvdb.PutResponse.error_txt)
  return error_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutResponse::release_error_txt() {
  // @@protoc_insertion_point(field_release:kvdb.PutResponse.error_txt)
  clear_has_error_txt();
  return error_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutResponse::set_allocated_error_txt(::std::string* error_txt) {
  if (error_txt != NULL) {
    set_has_error_txt();
  } else {
    clear_has_error_txt();
  }
  error_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_txt);
  // @@protoc_insertion_point(field_set_allocated:kvdb.PutResponse.error_txt)
}

// -------------------------------------------------------------------

// LockRequest

// required int64 sequence_num = 1;
inline bool LockRequest::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LockRequest::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LockRequest::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LockRequest::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 LockRequest::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.LockRequest.sequence_num)
  return sequence_num_;
}
inline void LockRequest::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.LockRequest.sequence_num)
}

// required string key = 2;
inline bool LockRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LockRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LockRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& LockRequest::key() const {
  // @@protoc_insertion_point(field_get:kvdb.LockRequest.key)
  return key_.GetNoArena();
}
inline void LockRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.LockRequest.key)
}
#if LANG_CXX11
inline void LockRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.LockRequest.key)
}
#endif
inline void LockRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.LockRequest.key)
}
inline void LockRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.LockRequest.key)
}
inline ::std::string* LockRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvdb.LockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvdb.LockRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvdb.LockRequest.key)
}

// required string owner = 3;
inline bool LockRequest::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LockRequest::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LockRequest::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LockRequest::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner();
}
inline const ::std::string& LockRequest::owner() const {
  // @@protoc_insertion_point(field_get:kvdb.LockRequest.owner)
  return owner_.GetNoArena();
}
inline void LockRequest::set_owner(const ::std::string& value) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.LockRequest.owner)
}
#if LANG_CXX11
inline void LockRequest::set_owner(::std::string&& value) {
  set_has_owner();
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.LockRequest.owner)
}
#endif
inline void LockRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.LockRequest.owner)
}
inline void LockRequest::set_owner(const char* value, size_t size) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.LockRequest.owner)
}
inline ::std::string* LockRequest::mutable_owner() {
  set_has_owner();
  // @@protoc_insertion_point(field_mutable:kvdb.LockRequest.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LockRequest::release_owner() {
  // @@protoc_insertion_point(field_release:kvdb.LockRequest.owner)
  clear_has_owner();
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LockRequest::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:kvdb.LockRequest.owner)
}

// required int32 timeout_ms = 4;
inline bool LockRequest::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LockRequest::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LockRequest::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LockRequest::clear_timeout_ms() {
  timeout_ms_ = 0;
  clear_has_timeout_ms();
}
inline ::google::protobuf::int32 LockRequest::timeout_ms() const {
  // @@protoc_insertion_point(field_get:kvdb.LockRequest.timeout_ms)
  return timeout_ms_;
}
inline void LockRequest::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:kvdb.LockRequest.timeout_ms)
}

// -------------------------------------------------------------------

// UnlockRequest

// required int64 sequence_num = 1;
inline bool UnlockRequest::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnlockRequest::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnlockRequest::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnlockRequest::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 UnlockRequest::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.UnlockRequest.sequence_num)
  return sequence_num_;
}
inline void UnlockRequest::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.UnlockRequest.sequence_num)
}

// required string key = 2;
inline bool UnlockRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& UnlockRequest::key() const {
  // @@protoc_insertion_point(field_get:kvdb.UnlockRequest.key)
  return key_.GetNoArena();
}
inline void UnlockRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.UnlockRequest.key)
}
#if LANG_CXX11
inline void UnlockRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.UnlockRequest.key)
}
#endif
inline void UnlockRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.UnlockRequest.key)
}
inline void UnlockRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.UnlockRequest.key)
}
inline ::std::string* UnlockRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:kvdb.UnlockRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnlockRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvdb.UnlockRequest.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnlockRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvdb.UnlockRequest.key)
}

// required string owner = 3;
inline bool UnlockRequest::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockRequest::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockRequest::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockRequest::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner();
}
inline const ::std::string& UnlockRequest::owner() const {
  // @@protoc_insertion_point(field_get:kvdb.UnlockRequest.owner)
  return owner_.GetNoArena();
}
inline void UnlockRequest::set_owner(const ::std::string& value) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.UnlockRequest.owner)
}
#if LANG_CXX11
inline void UnlockRequest::set_owner(::std::string&& value) {
  set_has_owner();
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.UnlockRequest.owner)
}
#endif
inline void UnlockRequest::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.UnlockRequest.owner)
}
inline void UnlockRequest::set_owner(const char* value, size_t size) {
  set_has_owner();
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.UnlockRequest.owner)
}
inline ::std::string* UnlockRequest::mutable_owner() {
  set_has_owner();
  // @@protoc_insertion_point(field_mutable:kvdb.UnlockRequest.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnlockRequest::release_owner() {
  // @@protoc_insertion_point(field_release:kvdb.UnlockRequest.owner)
  clear_has_owner();
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnlockRequest::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:kvdb.UnlockRequest.owner)
}

// -------------------------------------------------------------------

// Response

// required int64 sequence_num = 1;
inline bool Response::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_sequence_num() {
  sequence_num_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_num();
}
inline ::google::protobuf::int64 Response::sequence_num() const {
  // @@protoc_insertion_point(field_get:kvdb.Response.sequence_num)
  return sequence_num_;
}
inline void Response::set_sequence_num(::google::protobuf::int64 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:kvdb.Response.sequence_num)
}

// required bool success = 2;
inline bool Response::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:kvdb.Response.success)
  return success_;
}
inline void Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:kvdb.Response.success)
}

// optional int32 result = 3;
inline bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Response::result() const {
  // @@protoc_insertion_point(field_get:kvdb.Response.result)
  return result_;
}
inline void Response::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:kvdb.Response.result)
}

// optional string server_id = 4;
inline bool Response::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& Response::server_id() const {
  // @@protoc_insertion_point(field_get:kvdb.Response.server_id)
  return server_id_.GetNoArena();
}
inline void Response::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.Response.server_id)
}
#if LANG_CXX11
inline void Response::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.Response.server_id)
}
#endif
inline void Response::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.Response.server_id)
}
inline void Response::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.Response.server_id)
}
inline ::std::string* Response::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:kvdb.Response.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_server_id() {
  // @@protoc_insertion_point(field_release:kvdb.Response.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:kvdb.Response.server_id)
}

// optional string error_txt = 5;
inline bool Response::has_error_txt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error_txt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error_txt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error_txt() {
  error_txt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_txt();
}
inline const ::std::string& Response::error_txt() const {
  // @@protoc_insertion_point(field_get:kvdb.Response.error_txt)
  return error_txt_.GetNoArena();
}
inline void Response::set_error_txt(const ::std::string& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvdb.Response.error_txt)
}
#if LANG_CXX11
inline void Response::set_error_txt(::std::string&& value) {
  set_has_error_txt();
  error_txt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kvdb.Response.error_txt)
}
#endif
inline void Response::set_error_txt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvdb.Response.error_txt)
}
inline void Response::set_error_txt(const char* value, size_t size) {
  set_has_error_txt();
  error_txt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvdb.Response.error_txt)
}
inline ::std::string* Response::mutable_error_txt() {
  set_has_error_txt();
  // @@protoc_insertion_point(field_mutable:kvdb.Response.error_txt)
  return error_txt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_error_txt() {
  // @@protoc_insertion_point(field_release:kvdb.Response.error_txt)
  clear_has_error_txt();
  return error_txt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_error_txt(::std::string* error_txt) {
  if (error_txt != NULL) {
    set_has_error_txt();
  } else {
    clear_has_error_txt();
  }
  error_txt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_txt);
  // @@protoc_insertion_point(field_set_allocated:kvdb.Response.error_txt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvdb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
